expression = { 
    literal  |
    unary    |
    binary   |
    grouping
}

grouping = {"(" ~ expression ~ ")"}
unary    = { ("-" | "!" | "+" | "~" | "++")? ~ expression}
binary   = {expression ~ ( relational_op | arithmetic_op) ~ expression}

relational_op = {
    "==" |
    "!=" |
    "<"  |
    "<=" |
    ">"  |
    ">=" 
}

arithmetic_op = {
    "+"  |
    "-"  |
    "*"  |
    "/"  |
    "%" 
}

binary_op = {
    "&"  |
    "|"  |
    "^"  |
    "<<" |
    ">>" |
    "~"
}

asignament_op = {
    "="   |
    "+="  |
    "-="  |
    "*="  |
    "/="  |
    "%="  |
    "<<=" |
    ">>=" |
    "&="  |
    "^="  |
    "|="
}

logical_op = {
    "!"  |
    "&&" |
    "||"
}

operator = {
    "++" |
    "--" |
    logical_op    |
    arithmetic_op |
    binary_op     |
    asignament_op 
}

literal = {
    "true"  |
    "false" |
    "null"  |
    literal_number |
    literal_string |
    literal_char
}

literal_number = {
    literal_number_hex |
    literal_number_bin |
    literal_number_dec |
    literal_number_oct
}

literal_number_hex = {"0x" ~ ASCII_HEX_DIGIT+}
literal_number_bin = {"0b" ~ ASCII_BIN_DIGIT+}
literal_number_oct = {"0o" ~ ASCII_OCT_DIGIT+}
literal_number_dec = {"-"? ~ ASCII_DIGIT+}
literal_number_flt = {literal_number_dec ~ "." ~ ASCII_DIGIT+}

literal_string = {"\"" ~ ANY* ~ "\""}
literal_char = {"'" ~ ANY ~ "'"}